{"version":3,"sources":["PagesComponent/ContactsPage/contactStyle.module.scss","layOutComponent/Modal/Modal.module.scss","layOutComponent/Input/inputStyle.module.scss","PagesComponent/ContactsPage/SocialeComponent.tsx","layOutComponent/Modal/Modal.tsx","layOutComponent/Input/InputMade.tsx","PagesComponent/ContactsPage/sendDirectory/MessageArea.tsx","layOutComponent/successModal/SuccesedModal.tsx","PagesComponent/ContactsPage/sendDirectory/SendForm.tsx","common/ValidaeModalContact/ValidateContactModal.ts","PagesComponent/ContactsPage/ContactsPageComponent.tsx"],"names":["module","exports","SocialComponent","className","style","footerContent","numberContent","src","alt","href","socImg","ModalMade","modal","setModal","description","children","finalModalClassName","active","finalModalContentClassName","modal_content","onClick","e","stopPropagation","InputMade","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","errorMes","onBlur","setError","value","restProps","useState","ErrorBlur","setErrorBlur","finalSpanClassName","s","finalInputClassName","superInput","errorInput","currentTarget","key","MessageArea","isOpen","handleClose","messageValue","setMessageValue","open","onClose","areaMessage","TextField","event","margin","multiline","rows","placeholder","Button","color","SuccessModal","setIsOpen","Snackbar","autoHideDuration","Alert","severity","SendFormComponent","title","dataContacts","useSelector","state","Contacts","dispatch","useDispatch","nameValue","name","setName","emailValue","email","setEmail","message","setMessage","isBtnDisabled","isDisabledSend","setIsDisabledSend","isValidName","setIsValidName","isValidEmail","setIsValidEmail","errorName","setErrorName","errorEmail","setErrorEmail","isOpnMessageArea","setIsOpnMessageArea","useEffect","onShowModalForMessage","mainButton","role","Modal","setErrorMes","setValid","trim","test","validateInputEmail","setErrorMess","disabled","putData","status","Loader","isSuccessModal","ContactsPageComponent","document","container","HeadersComponent","label","sendingContent","SendForm","footerContainer"],"mappings":"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","file":"static/js/6.ccc9dd49.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"contactStyle_container__3-fZz\",\"sendingContent\":\"contactStyle_sendingContent__21bC7\",\"mainButton\":\"contactStyle_mainButton__3pHAV\",\"footerContent\":\"contactStyle_footerContent__3SlbB\",\"numberContent\":\"contactStyle_numberContent__2RMzN\",\"socImg\":\"contactStyle_socImg__3Wesz\",\"areaMessage\":\"contactStyle_areaMessage__NS411\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__2Ls1l\",\"modal_content\":\"Modal_modal_content__21Q8M\",\"TextField\":\"Modal_TextField__jiZA2\",\"active\":\"Modal_active__2Mkfm\",\"btn\":\"Modal_btn__2VUUS\",\"description\":\"Modal_description__1MHCW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"inputStyle_superInput__GIcAK\",\"errorInput\":\"inputStyle_errorInput__2xY7T\",\"error\":\"inputStyle_error__2g3cA\",\"otherInput\":\"inputStyle_otherInput__3TXqO\",\"search_panel\":\"inputStyle_search_panel__2jWbj\"};","import {FC} from \"react\";\r\nimport style from './contactStyle.module.scss'\r\n\r\nconst SocialComponent: FC = () => {\r\n\r\n    const sendMeFromGmail = \"https://mail.google.com/mail/u/0/?fs=1&to=Dima.Zharikov@gmail.com&su=jobs&body=&bcc=dima.zharikov@gmail.com&tf=cm#\"\r\n\r\n\r\n    return (<div className={style.footerContent}>\r\n        <div className={style.numberContent}>\r\n            <div>\r\n                <img src=\"https://img.icons8.com/nolan/50/apple-phone.png\" alt='phone'/>\r\n                <a href=\"viber://chat?number=%2B375297454830\">\r\n                    <img src=\"https://img.icons8.com/nolan/50/viber.png\" alt=\"viber\"/>\r\n                </a>\r\n\r\n                <a href=\"https://t.me/DimaZharikov\">\r\n                    <img src=\"https://img.icons8.com/nolan/50/telegram-app.png\" alt='telegram'/>\r\n                </a>\r\n            </div>\r\n            <div>\r\n                <p>+375(29) 745-48-30</p>\r\n            </div>\r\n        </div>\r\n        <div className={style.socImg}>\r\n            <a href=\"https://www.linkedin.com/in/dmitry-zharikov-ba636b200/\">\r\n                <img src=\"https://img.icons8.com/nolan/50/linkedin.png\"/>\r\n            </a>\r\n            <a href=\"https://vk.com/zharikov_d_n\">\r\n                <img src=\"https://img.icons8.com/nolan/50/vk-circled.png\"/>\r\n            </a>\r\n            <a href={sendMeFromGmail}>\r\n                <img src=\"https://img.icons8.com/color/50/000000/gmail--v2.png\"/> </a>\r\n        </div>\r\n\r\n\r\n    </div>)\r\n}\r\n\r\nexport default SocialComponent\r\n\r\n","import React, {FC} from 'react';\r\nimport style from './Modal.module.scss'\r\n\r\n\r\ninterface ModalType {\r\n    modal: boolean;\r\n    setModal: (value: boolean) => void;\r\n    description: boolean\r\n\r\n\r\n\r\n}\r\n\r\n\r\nconst ModalMade: FC<ModalType> = ({modal, setModal, description,\r\n                                  children,\r\n\r\n                                  }) => {\r\n    const finalModalClassName = `${style.modal} ${modal ? style.active : \"\"}`;\r\n    const finalModalContentClassName = `${style.modal_content} ${modal ? style.active : \"\"}`;\r\n\r\n\r\n\r\n    return (\r\n        <div className={finalModalClassName} onClick={() => setModal(false)}>\r\n            <div className={finalModalContentClassName} onClick={e => e.stopPropagation()}>\r\n                {children}\r\n                { description &&\r\n                    <div className={style.description}>\r\n                    <span>\r\n                        <h1>*</h1>\r\n                    </span>\r\n                        <span>\r\n                        <p> - All input fields are required! In order to send a message from this page, you need\r\n                            to fill in all the fields!</p>\r\n                    </span>\r\n\r\n                    </div>\r\n                }\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalMade;","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes, KeyboardEvent, ReactNode, useState} from \"react\";\r\nimport s from \"./inputStyle.module.scss\"\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: boolean\r\n    spanClassName?: string\r\n    errorMes?: string\r\n    setError?:(value:boolean) => void\r\n    className?:string\r\n    children?: ReactNode,\r\n\r\n};\r\n\r\nconst InputMade:FC<SuperInputTextPropsType> = (\r\n    {\r\n        type,\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n        errorMes,\r\n        onBlur,\r\n        setError,\r\n        value,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange\r\n        && onChange(e);\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\"\r\n        && onEnter\r\n        && onEnter();\r\n    }\r\n    const [ErrorBlur, setErrorBlur] = useState<boolean>(false)\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n    const finalInputClassName = `${s.superInput} ${ErrorBlur && error ? s.errorInput : className ? s[className] : ''}`; // need to fix with (?:) and s.superInput\r\n\r\n    const onBlurHandler = (e:React.FocusEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            onBlur && onBlur(e)\r\n            setErrorBlur(true)\r\n        } else if (!value){\r\n            onBlur && onBlur(e)\r\n            setErrorBlur(true)\r\n            setError && setError(true)\r\n        } else {\r\n            setErrorBlur(false)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n             <input\r\n                    type={type ? type : 'text'}\r\n                    onChange={onChangeCallback}\r\n                    value={value}\r\n                    onKeyPress={onKeyPressCallback}\r\n                    className={finalInputClassName}\r\n                    onBlur={onBlurHandler}\r\n                    {...restProps}\r\n                />\r\n\r\n\r\n\r\n\r\n\r\n\r\n            {ErrorBlur && error ? <span className={finalSpanClassName}>{errorMes}</span> :\r\n                <span className={finalSpanClassName}> </span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default InputMade;\r\n\r\n","import React, {ChangeEvent, FC} from \"react\";\r\nimport {Button, Modal, TextField} from \"@material-ui/core\";\r\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\r\nimport style from \"./../contactStyle.module.scss\"\r\n\r\ninterface Props {\r\n    isOpen: boolean;\r\n    handleClose: (isOpen: boolean) => void\r\n    messageValue: string\r\n    setMessageValue: (message: string) => void\r\n}\r\n\r\nexport const MessageArea: FC<Props> = ({\r\n                                           isOpen,\r\n                                           handleClose,\r\n                                           messageValue,\r\n                                           setMessageValue\r\n\r\n                                       }) => {\r\n\r\n\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setMessageValue(event.currentTarget.value)\r\n    }\r\n\r\n    return (<div>\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            className={style.areaMessage}\r\n        >\r\n            <div>\r\n                <div>\r\n                    <TextField\r\n                        onChange ={onChangeHandler}\r\n                        value = {messageValue}\r\n                        margin=\"normal\"\r\n                        multiline\r\n                        rows={5}\r\n                        placeholder={'This is where you leave your messages. This field is required to fill out' +\r\n                        ' and send a message. After filling, click \"OK\" to continue'}/>\r\n                </div>\r\n                <div>\r\n                    <Button color=\"primary\"\r\n                    onClick = {()=> handleClose(!isOpen)}\r\n                    ><DoneOutlineIcon/><p>OK</p></Button>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </Modal>\r\n    </div>)\r\n}\r\n\r\nexport default MessageArea","import {FC, Fragment, useState} from \"react\";\r\nimport {Snackbar} from \"@material-ui/core\";\r\nimport {Alert} from \"@material-ui/lab\";\r\n\r\n\r\ninterface Props {\r\n    open: boolean,\r\n\r\n}\r\n\r\nconst SuccessModal : FC <Props> = ({\r\n                                       open,\r\n\r\n\r\n                                   }) => {\r\n   const [isOpen, setIsOpen] = useState <boolean> (open)\r\n    const onHandleClose = () => {\r\n        setIsOpen(!isOpen)\r\n    }\r\n    return <Fragment>\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={onHandleClose}>\r\n            <Alert severity=\"success\">You message was sent</Alert>\r\n        </Snackbar>\r\n    </Fragment>\r\n}\r\n\r\nexport default SuccessModal","import {FC, Fragment, useEffect, useState} from \"react\";\r\nimport ModalMade from \"../../../layOutComponent/Modal/Modal\";\r\nimport style from \"./../contactStyle.module.scss\"\r\nimport InputMade from \"../../../layOutComponent/Input/InputMade\";\r\nimport {validateInputEmail, ValidateRequiredInput} from \"../../../common/ValidaeModalContact/ValidateContactModal\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport RateReviewIcon from '@material-ui/icons/RateReview';\r\nimport MessageArea from \"./MessageArea\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {putData, stateProps as contactsStateProps} from \"../../../Store/ContactsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../Store/Store\";\r\nimport Loader from \"../../../common/Loader/Loader\";\r\nimport SuccessModal from \"../../../layOutComponent/successModal/SuccesedModal\";\r\n\r\n\r\ninterface Props {\r\n    title: string,\r\n\r\n}\r\n\r\nconst SendFormComponent: FC<Props> = ({\r\n                                          title,\r\n\r\n\r\n                                      }) => {\r\n\r\n    const dataContacts = useSelector<AppRootStateType, contactsStateProps> (state => state.Contacts)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const [isOpen, setIsOpen] = useState<boolean>(false)\r\n\r\n    //values of Email, Password, Confirm Password\r\n    const [name, setName] = useState<string>(dataContacts.nameValue)\r\n    const [email, setEmail] = useState<string>(dataContacts.emailValue)\r\n    const [message, setMessage] = useState<string>(dataContacts.emailValue)\r\n    const [isDisabledSend, setIsDisabledSend] = useState <boolean> (dataContacts.isBtnDisabled)\r\n\r\n    //isValid\r\n    const [isValidName, setIsValidName] = useState<boolean>(false)\r\n    const [isValidEmail, setIsValidEmail] = useState<boolean>(false)\r\n\r\n\r\n\r\n    //Error\r\n    const [errorName, setErrorName] = useState<string>('')\r\n    const [errorEmail, setErrorEmail] = useState<string>('')\r\n\r\n\r\n    //modal for sendMessage\r\n    const [isOpnMessageArea, setIsOpnMessageArea] = useState<boolean>(false)\r\n\r\n    useEffect(()=>{\r\n        if (name && email && message){\r\n            if (errorName === ''&& errorEmail===''){\r\n                setIsDisabledSend(false)\r\n            }\r\n        }\r\n    },)\r\n\r\n    const onShowModal = () => {\r\n        setIsOpen(!isOpen)\r\n    }\r\n    const onShowModalForMessage = () => {\r\n        setIsOpnMessageArea(!isOpnMessageArea)\r\n    }\r\n\r\n\r\n    const onChangeNameHandler = (nameValue: string) => {\r\n        ValidateRequiredInput(nameValue, setName, setErrorName, setIsValidName)\r\n    }\r\n\r\n    const onChangeEmailHandler = (emailValue: string) => {\r\n        validateInputEmail(emailValue, setEmail, setErrorEmail, setIsValidEmail)\r\n    }\r\n\r\n\r\n    const onSendMessageDataHandler = () => {\r\n        if(name && email && message) {\r\n            dispatch (putData(name, email, message))\r\n        }\r\n        setName('')\r\n        setEmail('')\r\n        setMessage('')\r\n        setIsDisabledSend(true)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={style.mainButton}>\r\n            <h3 role=\"button\" onClick={onShowModal}>\r\n                Send Message From that Page\r\n            </h3>\r\n\r\n            <ModalMade modal={isOpen}\r\n                       setModal={setIsOpen}\r\n                       description={true}\r\n            >\r\n                <span>\r\n                    <InputMade placeholder={'E-mail'}\r\n                               value={email}\r\n                               onChangeText={onChangeEmailHandler}\r\n                               error={isValidEmail}\r\n                               errorMes={errorEmail}\r\n                               setError={setIsValidEmail}\r\n                    />\r\n                </span>\r\n                <span>\r\n                     <InputMade placeholder={'Name'}\r\n                                value={name}\r\n                                onChangeText={onChangeNameHandler}\r\n                                error={isValidName}\r\n                                setError={setIsValidName}\r\n                                errorMes={errorName}/>\r\n                </span>\r\n                <div>\r\n                    <span>\r\n                        <Button color=\"primary\" onClick={onShowModalForMessage}>\r\n                            <RateReviewIcon color=\"primary\"/> <p>WRITE YOU MESSAGE</p>\r\n                        </Button>\r\n\r\n                    </span>\r\n\r\n                    <MessageArea isOpen={isOpnMessageArea}\r\n                                 handleClose={onShowModalForMessage}\r\n                                 messageValue = {message}\r\n                                 setMessageValue = {setMessage}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button disabled = {isDisabledSend}\r\n                    onClick = {onSendMessageDataHandler}><SendIcon/> <h2>SEND</h2></Button>\r\n                </div>\r\n\r\n                <Fragment>\r\n                    {\r\n                        dataContacts.status === 'loading'\r\n                            ? <Loader/>\r\n                            : ''\r\n                    }\r\n                </Fragment>\r\n                {\r\n                    dataContacts.isSuccessModal && <SuccessModal open={dataContacts.isSuccessModal}/>\r\n                }\r\n            </ModalMade>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SendFormComponent","export const validateInputEmail = (value:string,\r\n                                   setEmail:(value: string) => void,\r\n                                   setErrorMes:(title: string)=> void,\r\n                                   setValid:(isValid: boolean)=> void) => {\r\n\r\n    const regularEmail = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\r\n\r\n    setEmail(value)\r\n    if (value.trim() === '') {\r\n        setErrorMes('Required')\r\n        setValid(true)\r\n    } else if (!regularEmail.test(value)) {\r\n        setValid(true)\r\n        setErrorMes('Email entered incorrectly')\r\n\r\n    } else {\r\n        setErrorMes('')\r\n        setValid(false)\r\n    }\r\n}\r\n\r\nexport const ValidateRequiredInput = (value: string,\r\n                                      setValue: (value: string) => void,\r\n                                      setErrorMess: (title: string) => void,\r\n                                      setValid: (isValid: boolean) => void) => {\r\n    setValue(value)\r\n    if (value.trim() === '') {\r\n        setErrorMess('Required')\r\n        setValid(true)\r\n    } else {\r\n        setErrorMess('')\r\n        setValid(false)\r\n    }\r\n}","import {FC, useEffect} from \"react\";\r\nimport HeadersComponent from \"../../layOutComponent/headers/HeadersComponent\";\r\nimport SocialComponent from \"./SocialeComponent\";\r\nimport SendFormComponent from \"./sendDirectory/SendForm\";\r\nimport style from \"./contactStyle.module.scss\"\r\n\r\nconst ContactsPageComponent : FC = () => {\r\n\r\n    useEffect (()=>{\r\n        document.title = 'Contacts'\r\n\r\n    })\r\n\r\n    return (<div className = {style.container}>\r\n        <HeadersComponent label={\"Contacts\"}  />\r\n        <div className={style.sendingContent}>\r\n            <SendFormComponent title = {'Send me Message from that Page'}/>\r\n\r\n        </div>\r\n        <footer className={style.footerContainer}>\r\n            <SocialComponent/>\r\n        </footer>\r\n\r\n    </div>)\r\n}\r\n\r\nexport default ContactsPageComponent"],"sourceRoot":""}